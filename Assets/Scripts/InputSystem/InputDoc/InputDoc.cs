//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputSystem/InputDoc/InputDoc.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputDoc : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputDoc()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputDoc"",
    ""maps"": [
        {
            ""name"": ""Management"",
            ""id"": ""b8ce4a2e-502b-415a-9c52-31bef68960b8"",
            ""actions"": [
                {
                    ""name"": ""Screenshot"",
                    ""type"": ""Button"",
                    ""id"": ""98115fb0-a33e-4c9a-8483-c5ba67a08dcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cbbeb5a3-a6f3-43a0-a933-6300f3b2d733"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c98428a-6995-4d4f-ac4f-a08532caa8e8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Screenshot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""febde1bc-e5cc-438d-a09e-319e3000dce1"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eaf6769d-d5e2-4251-9fd3-aca6fd7fc150"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""acc49831-6eb8-4eb2-a98f-d80c5d3e3acb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a9cbf4ec-dff5-46f8-b5d3-4c8b74e75036"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""16241b20-3155-4082-872a-855dd62ee43a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""adcc7dd0-158d-48f0-826a-1d9d8f331558"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""465e5f9b-5059-4882-9229-11eafef38a09"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Management
        m_Management = asset.FindActionMap("Management", throwIfNotFound: true);
        m_Management_Screenshot = m_Management.FindAction("Screenshot", throwIfNotFound: true);
        m_Management_Move = m_Management.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Management
    private readonly InputActionMap m_Management;
    private IManagementActions m_ManagementActionsCallbackInterface;
    private readonly InputAction m_Management_Screenshot;
    private readonly InputAction m_Management_Move;
    public struct ManagementActions
    {
        private @InputDoc m_Wrapper;
        public ManagementActions(@InputDoc wrapper) { m_Wrapper = wrapper; }
        public InputAction @Screenshot => m_Wrapper.m_Management_Screenshot;
        public InputAction @Move => m_Wrapper.m_Management_Move;
        public InputActionMap Get() { return m_Wrapper.m_Management; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManagementActions set) { return set.Get(); }
        public void SetCallbacks(IManagementActions instance)
        {
            if (m_Wrapper.m_ManagementActionsCallbackInterface != null)
            {
                @Screenshot.started -= m_Wrapper.m_ManagementActionsCallbackInterface.OnScreenshot;
                @Screenshot.performed -= m_Wrapper.m_ManagementActionsCallbackInterface.OnScreenshot;
                @Screenshot.canceled -= m_Wrapper.m_ManagementActionsCallbackInterface.OnScreenshot;
                @Move.started -= m_Wrapper.m_ManagementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ManagementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ManagementActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ManagementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Screenshot.started += instance.OnScreenshot;
                @Screenshot.performed += instance.OnScreenshot;
                @Screenshot.canceled += instance.OnScreenshot;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public ManagementActions @Management => new ManagementActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IManagementActions
    {
        void OnScreenshot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
